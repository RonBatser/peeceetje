/* * This file contains all functions for authentication of the user */const myPackages = require("./packages");const myConfiguration = require("./configurations");const showPages = require("./showPages.js");const connection = myConfiguration.connection;const Q = require("./queries");const bcrypt = myPackages.bcrypt;const userFunctions = require("./usersFunctions");//used to log in the userfunction logIn(req, res, cb) {    req.session.userLoggedIn =        {            username: req.body.username,            password: bcrypt.hashSync(req.body.password)        };    const password = req.body.password;    connection.query(Q.LOG_IN_USER, [req.session.userLoggedIn.username], function (err, result) {        console.log(result);        if (err === null && result.length > 0) {            if (bcrypt.compareSync(password, result[0].wachtwoord)) {                req.session.userLoggedIn.id = result[0].idusers;                userFunctions.logVisit(req, res);                cb(true);            } else {                cb(false)            }        } else {            cb(false)        }    });}//used to log out the current userfunction logOut(req, res) {    req.session.userLoggedIn = null;    res.redirect("/");}//register a new userfunction registerUser(req, res) {    const user = {        username: req.body.username,        firstname: req.body.firstname,        lastname: req.body.lastname,        password: bcrypt.hashSync(req.body.password),        birthdate: `${req.body.year}-${req.body.month}-${req.body.day}`    };    let ok = true;    for (let prop in user) {        if (user[prop].length === 0) {            ok = false;        }    }    if (!ok) {        showPages.showLogInScreen(req, res, "Gelieve alle velden in te vullen.");    }    else {        connection.query(Q.SELECT_USER, [user.username], function (err, result) {            if (result != null && result.length === 0) {                connection.query(Q.INSERT_USER, [user.username, user.firstname, user.lastname, user.birthdate, user.password, 0], function (err, result) {                    if (err != null) {                        console.log(err);                        showPages.showLogInScreen(req, res, "Er heeft zich een onbekende fout voorgedaan.");                    } else {                        user.id = result.insertId;                        connection.query(Q.SET_USER_GEBRUIKER, [user.id], function (err, result) {                            if (err == null) {                                req.session.userLoggedIn = user;                                req.session.username = bcrypt.hashSync(req.session.userLoggedIn.username);                                req.session.isUserLoggedIn = true;                                res.redirect("/");                            } else {                                connection.query("Delete from users where idusers = ?", [user.id], function (err, result) {                                    showPages.showLogInScreen(req, res, "Er heeft zich een onbekende fout voorgedaan. (2)");                                })                            }                        })                    }                })            } else {                showPages.showLogInScreen(req, res, "username bestaat reeds");            }        });    }}//checks if the user has the required privilegesfunction checkUserPrivilege(req, res, role, next) {    const roles = ["gebruiker", "barman", "admin"];    let currentIndex = roles.indexOf(role);    let found = false;    connection.query(Q.GET_ROLE_USER, [req.session.userLoggedIn.id], function (err, result) {        if (result != null && result.length > 0) {            while (currentIndex < roles.length) {                console.log(currentIndex);                if (result[0].rolnaam === roles[currentIndex]) {                    found = true;                    next(req, res);                }                currentIndex++;            }            if (!found) {                res.render("GeenToegang.ejs");            }        } else {            res.render("GeenToegang.ejs");        }    })}function resetPassword(req, res) {    checkUserPrivilege(req, res, "admin", function (req, res) {        connection.query(Q.UPDATE_USER_PASSWORD_ID, [bcrypt.hashSync("Peeceetje"), req.body.id], function (err, result) {            res.redirect("/users");        })    })}//changes the password of the userfunction changePassword(req, res) {    const oldPassword = req.body.oldPassword;    const newPassword = bcrypt.hashSync(req.body.newPassword);    connection.query(Q.LOG_IN_USER, [req.session.userLoggedIn.username], function (err, result) {        if (result.length > 0) {            if (bcrypt.compareSync(oldPassword, result[0].wachtwoord)) {                connection.query(Q.UPDATE_USER_PASSWORD, [newPassword, req.session.userLoggedIn.username], function (err, result) {                    showPages.showProfile(req, res, "uw wachtwoord is gewijzigd");                })            } else {                showPages.showChangePassword(req, res, "fout wachtwoord");            }        } else {            showPages.showChangePassword(req, res, "fout wachtwoord");        }    });}module.exports =    {        checkUserPrivilege,        changePassword,        logIn,        logOut,        registerUser,        resetPassword    };